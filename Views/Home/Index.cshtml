@{
    ViewData["Title"] = "Home Page";
}
@model PARiConnect.MVCApp.ViewModels.HomeIndexViewModel
<div class="row">
    <div class="col-lg-9 col-md-12">
        <div class="col my-4 clearfix">
            <div class="float-left">
                <h4 class="title-1">Welcome to PARiConnect</h4>
            </div>
            <div class="float-right">
                <button class="btn btn-outline-primary btn-lg" type="button" data-toggle="modal" data-target="#exampleModal">
                    <i class="fa fa-user-plus" aria-hidden="true"></i>
                    Add New Client
                </button>
            </div>
        </div>
        <ul class="nav nav-tabs" role="tablist">
            <li class="nav-item">
                <a class="nav-link active" data-toggle="tab" href="#pending" role="tab">Pending Assessments</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" data-toggle="tab" href="#completed" role="tab">Completed Assessments</a>
            </li>
        </ul>
        <div class="tab-content">
            <div class="tab-pane active" id="pending" role="tabpanel">
                <div class="mt-2">
                    @await Component.InvokeAsync("AssessmentReview", new { completed = false })
                </div>
            </div>
            <div class="tab-pane" id="completed" role="tabpanel">
                <div class="mt-2">
                    @await Component.InvokeAsync("AssessmentReview", new { completed = true })
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-3 par-bg-2 p-2 pt-3 bg-light">
        <div>
            @await Component.InvokeAsync("Notifications", new { completed = true })
        </div>
        <div>
            @await Component.InvokeAsync("RecentlyAccessed", new { completed = true })
        </div>
        <div>
            @Html.Partial("_HelpMenu")
        </div>
    </div>
</div>
@Html.Partial("_Modal")
@section scripts {
    <script type="text/javascript">
        $(document).ready(function () {

             $.tablesorter.addParser({
                id: 'last-name',
                is: function(s) {
                return false;
                },
                format: function(str) {
                var parts = (str || '').split(/\s+/),
                    last = parts.pop();
                parts.unshift(last);
                return parts.join(' ');
                },
                // set type, either numeric or text
                type: 'text'
            });
            $(".sortable").tablesorter();


            $(".search-input").keyup(function () {

                var value = this.value;
                //searchTables(value);
            });

            $(".firstLastToggle").click(function(e){
                $(".name-header").toggleClass("sorter-last-name");
                $(".tablesorter").trigger("update");
                if($(".name-header").hasClass("sorter-last-name")){
                    $(".first").text("L");
                    $(".last").text("F");
                }
                else{
                    $(".first").text("F");
                    $(".last").text("L"); 
                }
            });
            $(".searchToggle").click(function(e){
                    $(".search-toggle").toggle();
            });

            $("[data-toggle=popover]").each(function(i, obj) {
                $(this).popover({
                html: true,
                content: function() {
                    var id = $(this).attr('id')
                    //$('#popover-content-' + id).show();
                    return $('#popover-content-' + id).html();
                }
                });
            });
            $(".fa-sort").click(function(e){
                    $(".fa-sort").show();
                    $(this).hide();
            });
            $( "#assessment-table-completed .filter" ).change(function() {
                console.log("assessment-table-completed .filter");
                filterTable("assessment-table-completed");
                //filterTable("assessment-table-completed", this.value.trim().toUpperCase(),"0");
                //rePopulateSelectList('assessment-table-completed', 1, 'assessment-select');
                //rePopulateSelectList('assessment-table-completed', 3, 'status-select');
            });
            $( "#assessment-table-pending .filter" ).change(function() {
                console.log("assessment-table-pending .filter");
                filterTable("assessment-table-pending");
                //filterTable("assessment-table-pending",this.value.trim().toUpperCase(), "0");
                //rePopulateSelectList('assessment-table-pending', 1, 'assessment-select');
                //rePopulateSelectList('assessment-table-pending', 3, 'status-select');

            });
 
            setup();
        }
        );
        function setup() {
            rePopulateSelectList('assessment-table-completed', 0, 'client-select');
            rePopulateSelectList('assessment-table-completed', 1, 'assessment-select');
            rePopulateSelectList('assessment-table-completed', 3, 'status-select');
            rePopulateSelectList('assessment-table-pending', 0, 'client-select');
            rePopulateSelectList('assessment-table-pending', 1, 'assessment-select');
            rePopulateSelectList('assessment-table-pending', 3, 'status-select');
            cleanupSelectedLists();
        }
        function rePopulateSelectList(table, columnIndex, select) {

            var selectSelector = '#' + table + ' .' + select + ' option';
            $(selectSelector).remove();
            var control = $('#' + table + ' .' + select), values = [];
            $('#' + table + ' tr').each(function () {
                var cell = $(this).find('td:eq(' + columnIndex + ')'),
                    text = cell.text();

                if (values.indexOf(text) == -1) {
                    values.push(text);
                }
            });
            //var arrayLength = myStringArray.length;
            values.sort();
            control.append('<option value="All">All</option>');
            for (var i = 0; i < values.length; i++) {
                control.append('<option value="' + values[i] + '">' + values[i] + '</option>');
            }
        }
        function cleanupSelectedLists() {
            $('select option')
                .filter(function() {
                    return !this.value || $.trim(this.value).length == 0;
                })
            .remove();

            $('select option')
                .first()
                .prop('selected', true);
        }
        function searchTables(value) {

            $(".searchable").find("tr").each(function (index) { 
                
                if (value && value.toUpperCase() === "ALL") {
                        $(this).show();
                } 
                else {
                    var rowMatch = false;
                    $(this).find("td").each(function (index) {
                           if ($(this).text().toUpperCase().indexOf(value.toUpperCase()) !== -1)
                                rowMatch = true;
                    });
                    $(this).toggle(rowMatch);  
                }                
            });
        }
        function findObjectByKey(array, key, value) {
            for (var i = 0; i < array.length; i++) {
                if (array[i][key] === value) {
                    return array[i];
                }
            }
            return null;
        }
        function filterTable(table) {
            if(table){
                table = "#" + table;  // + " .searchable";
                //console.log(table);
                var filters = [];
                $(table + " thead").find("th").each(function (index) {
                        //console.log(index);
                        if($(this).find(".filter")[0]){
                            //console.log($(this).find(".filter").val().trim().toUpperCase());
                            if($(this).find(".filter").val().trim().toUpperCase() !== 'ALL'){
                                filters.push({
                                    key: index,
                                    value: $(this).find(".filter").val().trim().toUpperCase()
                                });
                            }
                        }       
                 });
                 $(table + " tbody").find("tr").each(function (rIndex) { 
                    var rowMatchCount = 0;
                    var row = $(this);
                    filters.forEach(function(element, index) {
                        if(row.find('td').eq(element.key).text().trim().toUpperCase().indexOf(element.value) !== -1){
                            rowMatchCount++;
                            console.log(element.key + ": " + element.value);   
                        }
                    });
                    
                    if(rowMatchCount === filters.length)
                        $(this).show();  
                    else
                        $(this).hide();
                });
            }
        }
        function filterTable3(table, value, column) {
            if(table){
                table = "#" + table;  // + " .searchable";
                if(value.toUpperCase() === "ALL"){
                    $('.search tr ').show();
                    return;
                }
                $(table + " tbody").addClass("search");
                var rex = new RegExp(value, 'i');
                $('.search tr ').hide();
                var show = true;
                 $('.search tr ').filter(function(i, v) {
                    var $t = $(this).children(":eq(" + column + ")");
                    return rex.test($t.text());
                }).show(true); 
            }
        }
         </script>
}
