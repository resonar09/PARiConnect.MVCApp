@{
    ViewData["Title"] = "Home Page";
    //var component = "EditClient";
}
@model PARiConnect.MVCApp.ViewModels.HomeIndexViewModel
<div class="row">
    <div class="col-lg-9 col-md-12">
        <div class="col mt-4 clearfix">
            <div class="float-left">
                <h4 class="title-1">Welcome to PARiConnect</h4>
            </div>
            <div class="float-right">
                <div>
                    <button class="btn btn-outline-primary btn-lg" type="button" data-toggle="modal" data-target="#clientEditModal">
                        <i class="fa fa-user-plus" aria-hidden="true"></i>
                        Add New Client
                    </button>
                </div>
                <div class="text-right">
                    <button class="btn btn-link btn-sm" type="button" data-toggle="modal" data-target="#dynFormModal">
                        Add New Clinician
                    </button>
                </div>
                <div class="text-right">
                    <button class="btn btn-link btn-sm" type="button" data-toggle="modal" data-target="#groupEditModal">
                        Add New Group
                    </button>
                </div>

            </div>
        </div>
        <ul class="nav nav-tabs" role="tablist">
            <li class="nav-item">
                <a class="nav-link active" data-toggle="tab" href="#pending" role="tab">Pending Assessments</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" data-toggle="tab" href="#completed" role="tab">Completed Assessments</a>
            </li>
        </ul>
        <div class="tab-content">
            <div class="tab-pane active" id="pending" role="tabpanel">
                <div class="mt-2">
                    @await Component.InvokeAsync("AssessmentReview", new { completed = false })
                </div>
            </div>
            <div class="tab-pane" id="completed" role="tabpanel">
                <div class="mt-2">
                    @await Component.InvokeAsync("AssessmentReview", new { completed = true })
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-3 par-bg-2 p-2 pt-3 bg-light">
        <div>
            @await Component.InvokeAsync("Notifications", new { completed = true })
        </div>
        <div>
            @await Component.InvokeAsync("RecentlyAccessed", new { completed = true })
        </div>
        <div>
            @Html.Partial("_HelpMenu")
        </div>
    </div>
</div>
@await Component.InvokeAsync("DynamicForm", new { model = "ClientEdit"})
@await Component.InvokeAsync("DynamicForm", new { model = "GroupEdit"})
@section scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
    <script type="text/javascript">
        $(document).ready(function () {

             $.tablesorter.addParser({
                id: 'last-name',
                is: function(s) {
                return false;
                },
                format: function(str) {
                var parts = (str || '').split(/\s+/),
                    last = parts.pop();
                parts.unshift(last);
                return parts.join(' ');
                },
                // set type, either numeric or text
                type: 'text'
            });
            $(".sortable").tablesorter();


            $(".search-input").keyup(function () {

                var value = this.value;
                //searchTables(value);
            });

            $(".firstLastToggle").click(function(e){
                $(".name-header").toggleClass("sorter-last-name");
                $(".tablesorter").trigger("update");
                if($(".name-header").hasClass("sorter-last-name")){
                    $(".first").text("L");
                    $(".last").text("F");
                }
                else{
                    $(".first").text("F");
                    $(".last").text("L"); 
                }
            });
            $(".searchToggle").click(function(e){
                    $(".search-toggle").toggle();
            });

            $("[data-toggle=popover]").each(function(i, obj) {
                $(this).popover({
                html: true,

                content: function() {
                    var id = $(this).attr('id')
                    return $('#popover-content-' + id).html();
                }
                });
            });
            $('.popover-dismiss').popover({
                trigger: 'focus'
            });

            $( "#assessment-table-completed .filter" ).change(function() {
                filterTable("assessment-table-completed");
            });
            $( "#assessment-table-pending .filter" ).change(function() {
                filterTable("assessment-table-pending");
            });
            $( "#assessment-table-completed .search" ).keyup(function() {
                filterTable("assessment-table-completed");
            });
            $( "#assessment-table-pending .search" ).keyup(function() {
                filterTable("assessment-table-pending");
            });
 
            setup();
        }
        );
        function setup() {
            rePopulateSelectList('assessment-table-pending', true);
            rePopulateSelectList('assessment-table-completed', true);
            //cleanupSelectedLists();
        }
        function populateSelectList(table, columnIndex, select) {

            var selectSelector = '#' + table + ' .' + select + ' option';
            $(selectSelector).remove();
            var control = $('#' + table + ' .' + select), values = [];
            var rowCount = 0;
            $('#' + table + ' tr').each(function () {
                if($(this).is(":visible")){
                    var cell = $(this).find('td:eq(' + columnIndex + ')'),
                        text = cell.text();
                    if (values.indexOf(text) == -1) {
                        values.push(text);
                    }
                }
            });
            //var arrayLength = myStringArray.length;
            values.sort();
            control.append('<option value="All">All</option>');
            for (var i = 0; i < values.length; i++) {
                control.append('<option value="' + values[i] + '">' + values[i] + '</option>');
            }
        }
        function rePopulateSelectList(table, init) {
            var tableSelector = "#" + table;
            var filterCols = $(tableSelector + ' thead').find(".filter").parents('th');
            var rowCount = 0;
            filterCols.each(function(index, elem) {
                var colList = [];
                $(tableSelector + ' tbody tr').each(function () {
                    var row = $(this);
                    if(row.is(":visible") || init){
                        var cell = row.find('td').eq(elem.column).text().trim();     
                        if (colList.indexOf(cell) == -1) {
                            colList.push(cell);
                        }
                    }
                });
                var control = $(this).find(".filter");
                if(control.val()){                        
                        var selected = control.val().trim();
                }  
                var options = control.find("option");
                if(colList.length > 0){
                        options.remove();
                        control.append('<option value="All">All</option>');
                        for (var i = 0; i < colList.length; i++) {
                                if(colList[i] === selected)
                                    control.append('<option value="' + colList[i] + '" selected>' + colList[i] + '</option>');
                                else
                                    control.append('<option value="' + colList[i] + '">' + colList[i] + '</option>');                                                                                                             
                        }
                } 
            });   
        }
        function cleanupSelectedLists() {
            $('select option')
                .filter(function() {
                    return !this.value || $.trim(this.value).length == 0;
                })
            .remove();

            $('select option')
                .first()
                .prop('selected', true);
        }
        function searchTables(value) {

            $(".searchable").find("tr").each(function (index) { 
                
                if (value && value.toUpperCase() === "ALL") {
                        $(this).show();
                } 
                else {
                    var rowMatch = false;
                    $(this).find("td").each(function (index) {
                           if ($(this).text().toUpperCase().indexOf(value.toUpperCase()) !== -1)
                                rowMatch = true;
                    });
                    $(this).toggle(rowMatch);  
                }                
            });
        }
        function findObjectByKey(array, key, value) {
            for (var i = 0; i < array.length; i++) {
                if (array[i][key] === value) {
                    return array[i];
                }
            }
            return null;
        }
        function filterTable(table) {
            if(table){   
                tableSelector = "#" + table;  // + " .searchable";
                var filters = [];
                $(tableSelector + " thead").find("th").each(function (index) {
                        if($(this).find(".filter")[0]){
                            if($(this).find(".filter").val().trim().toUpperCase() !== 'ALL'){
                                filters.push({
                                    key: index,
                                    value: $(this).find(".filter").val().trim().toUpperCase()
                                });
                            }
                        }  
                        if($(this).find(".search")[0]){
                            if($(this).find(".search").val().trim().toUpperCase() !== ''){
                                filters.push({
                                    key: index,
                                    value: $(this).find(".search").val().trim().toUpperCase()
                                });
                            }
                        }       
                 });
                 
                 $(tableSelector + " tbody").find("tr").each(function (rIndex) { 
                    var rowMatchCount = 0;
                    var row = $(this);
                    filters.forEach(function(element, index) {
                        if(row.find('td').eq(element.key).text().trim().toUpperCase().indexOf(element.value) !== -1){
                            rowMatchCount++;
                            //console.log(element.key + ": " + element.value);   
                        }
                    });
                    if(rowMatchCount === filters.length)
                        $(this).show();  
                    else
                        $(this).hide();
                });
            rePopulateSelectList(table);  
            }
        }

         </script>
}
